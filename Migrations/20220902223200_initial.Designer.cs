// <auto-generated />
using System;
using E_prescription;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace E_prescription.Migrations
{
    [DbContext(typeof(EPrescriptiondbContext))]
    [Migration("20220902223200_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Latin1_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("E_prescription.ActiveIngredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .HasColumnType("int")
                        .HasColumnName("IngredientID");

                    b.Property<string>("IngredientDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("StrengthId")
                        .HasColumnType("int")
                        .HasColumnName("StrengthID");

                    b.HasKey("IngredientId");

                    b.HasIndex("StrengthId");

                    b.ToTable("ActiveIngredient");
                });

            modelBuilder.Entity("E_prescription.ActiveIngredientStrength", b =>
                {
                    b.Property<int>("StrengthId")
                        .HasColumnType("int")
                        .HasColumnName("StrengthID");

                    b.Property<string>("StrengthDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StrengthId");

                    b.ToTable("ActiveIngredientStrength");
                });

            modelBuilder.Entity("E_prescription.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("AdminID");

                    b.HasKey("AdminId");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("E_prescription.ChronicHistory", b =>
                {
                    b.Property<int>("ChronicId")
                        .HasColumnType("int")
                        .HasColumnName("ChronicID");

                    b.Property<int?>("ConditionId")
                        .HasColumnType("int")
                        .HasColumnName("ConditionID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DoctorID");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.HasKey("ChronicId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("ChronicHistory");
                });

            modelBuilder.Entity("E_prescription.ChronicMedication", b =>
                {
                    b.Property<int>("ChronicMedicationId")
                        .HasColumnType("int")
                        .HasColumnName("ChronicMedicationID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DoctorID");

                    b.Property<int?>("MedicationId")
                        .HasColumnType("int")
                        .HasColumnName("MedicationID");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.HasKey("ChronicMedicationId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicationId");

                    b.HasIndex("PatientId");

                    b.ToTable("ChronicMedication");
                });

            modelBuilder.Entity("E_prescription.City", b =>
                {
                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<string>("CityName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(4)
                        .HasColumnType("nchar(4)")
                        .IsFixedLength(true);

                    b.HasKey("CityId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("E_prescription.ConditionDiagnosis", b =>
                {
                    b.Property<int>("ConditionId")
                        .HasColumnType("int")
                        .HasColumnName("ConditionID");

                    b.Property<string>("ConditionDecription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ConditionId");

                    b.ToTable("ConditionDiagnosis");
                });

            modelBuilder.Entity("E_prescription.ContraIndication", b =>
                {
                    b.Property<int>("ContraIndicationId")
                        .HasColumnType("int")
                        .HasColumnName("ContraIndicationID");

                    b.Property<int?>("ConditionId")
                        .HasColumnType("int")
                        .HasColumnName("ConditionID");

                    b.Property<string>("ContraIndicationName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("IngredientId")
                        .HasColumnType("int")
                        .HasColumnName("IngredientID");

                    b.HasKey("ContraIndicationId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("IngredientId");

                    b.ToTable("ContraIndication");
                });

            modelBuilder.Entity("E_prescription.DispensedMedication", b =>
                {
                    b.Property<int>("DispensedMedicationId")
                        .HasColumnType("int")
                        .HasColumnName("DispensedMedicationID");

                    b.Property<int?>("ContraIndicationId")
                        .HasColumnType("int")
                        .HasColumnName("ContraIndicationID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("DosageId")
                        .HasColumnType("int")
                        .HasColumnName("DosageID");

                    b.Property<int?>("MedInteractionId")
                        .HasColumnType("int")
                        .HasColumnName("MedInteractionID");

                    b.Property<int>("MedicationId")
                        .HasColumnType("int")
                        .HasColumnName("MedicationID");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<int?>("PharmacistId")
                        .HasColumnType("int")
                        .HasColumnName("PharmacistID");

                    b.Property<string>("Quantity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WarningIgnoreReason")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DispensedMedicationId");

                    b.HasIndex("ContraIndicationId");

                    b.HasIndex("DosageId");

                    b.HasIndex("MedInteractionId");

                    b.HasIndex("MedicationId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PharmacistId");

                    b.ToTable("DispensedMedication");
                });

            modelBuilder.Entity("E_prescription.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DoctorID");

                    b.Property<string>("Hcrn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("HCRN");

                    b.Property<int?>("MedicalPracticeId")
                        .HasColumnType("int")
                        .HasColumnName("MedicalPracticeID");

                    b.Property<int?>("QualificationId")
                        .HasColumnType("int")
                        .HasColumnName("QualificationID");

                    b.HasKey("DoctorId");

                    b.HasIndex("MedicalPracticeId");

                    b.HasIndex("QualificationId");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("E_prescription.DosageForm", b =>
                {
                    b.Property<int>("DosageId")
                        .HasColumnType("int")
                        .HasColumnName("DosageID");

                    b.Property<string>("DosageDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DosageId");

                    b.ToTable("DosageForm");
                });

            modelBuilder.Entity("E_prescription.HighestQualification", b =>
                {
                    b.Property<int>("QualificationId")
                        .HasColumnType("int")
                        .HasColumnName("QualificationID");

                    b.Property<string>("QualificationName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("QualificationId");

                    b.ToTable("HighestQualification");
                });

            modelBuilder.Entity("E_prescription.InteractionLevel", b =>
                {
                    b.Property<int>("InteractionLevelId")
                        .HasColumnType("int")
                        .HasColumnName("InteractionLevelID");

                    b.Property<string>("InteractionLevelDecsription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("InteractionLevelId");

                    b.ToTable("InteractionLevel");
                });

            modelBuilder.Entity("E_prescription.MedInteractionActiveIngredient", b =>
                {
                    b.Property<int>("MedInteractionActiveIngredientId")
                        .HasColumnType("int")
                        .HasColumnName("MedInteraction_ActiveIngredientID");

                    b.Property<int?>("IngredientId")
                        .HasColumnType("int")
                        .HasColumnName("IngredientID");

                    b.Property<int?>("InteractionLevelId")
                        .HasColumnType("int")
                        .HasColumnName("InteractionLevelID");

                    b.Property<int?>("MedInteractionId")
                        .HasColumnType("int")
                        .HasColumnName("MedInteractionID");

                    b.HasKey("MedInteractionActiveIngredientId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("InteractionLevelId");

                    b.HasIndex("MedInteractionId");

                    b.ToTable("MedInteraction_ActiveIngredient");
                });

            modelBuilder.Entity("E_prescription.MedicalPractice", b =>
                {
                    b.Property<int>("MedicalPracticeId")
                        .HasColumnType("int")
                        .HasColumnName("MedicalPracticeID");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<string>("PracticeContactNo")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("PracticeEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PracticeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PracticeNo")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.HasKey("MedicalPracticeId");

                    b.HasIndex("CityId");

                    b.ToTable("MedicalPractice");
                });

            modelBuilder.Entity("E_prescription.MedicationInteraction", b =>
                {
                    b.Property<int>("MedInteractionId")
                        .HasColumnType("int")
                        .HasColumnName("MedInteractionID");

                    b.Property<string>("ActiveIngredient1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ActiveIngredient2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("IngredientId")
                        .HasColumnType("int")
                        .HasColumnName("IngredientID");

                    b.HasKey("MedInteractionId");

                    b.HasIndex("IngredientId");

                    b.ToTable("MedicationInteraction");
                });

            modelBuilder.Entity("E_prescription.MedicationRecord", b =>
                {
                    b.Property<int>("MedicationId")
                        .HasColumnType("int")
                        .HasColumnName("MedicationID");

                    b.Property<int?>("IngredientId")
                        .HasColumnType("int")
                        .HasColumnName("IngredientID");

                    b.Property<string>("MedicationName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("ScheduleID");

                    b.HasKey("MedicationId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("MedicationRecord");
                });

            modelBuilder.Entity("E_prescription.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<string>("Dob")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("DOB");

                    b.Property<string>("Idnumber")
                        .HasMaxLength(13)
                        .HasColumnType("nchar(13)")
                        .HasColumnName("IDNumber")
                        .IsFixedLength(true);

                    b.HasKey("PatientId");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("E_prescription.PatientAllergy", b =>
                {
                    b.Property<int>("AllergyId")
                        .HasColumnType("int")
                        .HasColumnName("AllergyID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DoctorID");

                    b.Property<int?>("IngredientId")
                        .HasColumnType("int")
                        .HasColumnName("IngredientID");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.HasKey("AllergyId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientAllergy");
                });

            modelBuilder.Entity("E_prescription.PatientDoctorVisit", b =>
                {
                    b.Property<int>("PatientDoctorVisitId")
                        .HasColumnType("int")
                        .HasColumnName("PatientDoctorVisitID");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("DoctorID");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientID");

                    b.Property<DateTime?>("VisitDate")
                        .HasColumnType("datetime");

                    b.HasKey("PatientDoctorVisitId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientDoctorVisit");
                });

            modelBuilder.Entity("E_prescription.Pharmacist", b =>
                {
                    b.Property<int>("PharmacistId")
                        .HasColumnType("int")
                        .HasColumnName("PharmacistID");

                    b.Property<int?>("PharmacyId")
                        .HasColumnType("int")
                        .HasColumnName("PharmacyID");

                    b.Property<string>("RegNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.HasKey("PharmacistId");

                    b.HasIndex("PharmacyId");

                    b.ToTable("Pharmacist");
                });

            modelBuilder.Entity("E_prescription.Pharmacy", b =>
                {
                    b.Property<int>("PharmacyId")
                        .HasColumnType("int")
                        .HasColumnName("PharmacyID");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<string>("LicenseNo")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("PharmacyContactNo")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("PharmacyEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PharmacyName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PharmacyId");

                    b.HasIndex("CityId");

                    b.ToTable("Pharmacy");
                });

            modelBuilder.Entity("E_prescription.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int")
                        .HasColumnName("PrescriptionID");

                    b.Property<int?>("ConditionId")
                        .HasColumnType("int")
                        .HasColumnName("ConditionID");

                    b.Property<int?>("DosageId")
                        .HasColumnType("int")
                        .HasColumnName("DosageID");

                    b.Property<string>("Instruction")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MedicationId")
                        .HasColumnType("int")
                        .HasColumnName("MedicationID");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("ConditionId");

                    b.HasIndex("DosageId");

                    b.HasIndex("MedicationId");

                    b.ToTable("Prescription");
                });

            modelBuilder.Entity("E_prescription.PrescriptionMedication", b =>
                {
                    b.Property<int>("PrescriptionMedicationId")
                        .HasColumnType("int")
                        .HasColumnName("PrescriptionMedicationID");

                    b.Property<int?>("ContraIndicationId")
                        .HasColumnType("int")
                        .HasColumnName("ContraIndicationID");

                    b.Property<int?>("DosageId")
                        .HasColumnType("int")
                        .HasColumnName("DosageID");

                    b.Property<string>("Instruction")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MedInteractionId")
                        .HasColumnType("int")
                        .HasColumnName("MedInteractionID");

                    b.Property<int?>("MedicationId")
                        .HasColumnType("int")
                        .HasColumnName("MedicationID");

                    b.Property<int?>("PatientDoctorVisitId")
                        .HasColumnType("int")
                        .HasColumnName("PatientDoctorVisitID");

                    b.Property<DateTime?>("PrescriptionDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PrescriptionId")
                        .HasColumnType("int")
                        .HasColumnName("PrescriptionID");

                    b.Property<string>("Quantity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RepeatId")
                        .HasColumnType("int")
                        .HasColumnName("RepeatID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WarningIgnoreReason")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PrescriptionMedicationId");

                    b.HasIndex("ContraIndicationId");

                    b.HasIndex("DosageId");

                    b.HasIndex("MedInteractionId");

                    b.HasIndex("MedicationId");

                    b.HasIndex("PatientDoctorVisitId");

                    b.HasIndex("RepeatId");

                    b.ToTable("Prescription_Medication");
                });

            modelBuilder.Entity("E_prescription.Repeat", b =>
                {
                    b.Property<int>("RepeatId")
                        .HasColumnType("int")
                        .HasColumnName("RepeatID");

                    b.Property<string>("RepeatDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RepeatId");

                    b.ToTable("Repeat");
                });

            modelBuilder.Entity("E_prescription.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("ScheduleID");

                    b.Property<string>("ScheduleDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ScheduleId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("E_prescription.Suburb", b =>
                {
                    b.Property<int>("SuburbId")
                        .HasColumnType("int")
                        .HasColumnName("SuburbID");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<string>("SuburbName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SuburbId");

                    b.HasIndex("CityId");

                    b.ToTable("Suburb");
                });

            modelBuilder.Entity("E_prescription.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<string>("ContactNo")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("CityId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("E_prescription.ActiveIngredient", b =>
                {
                    b.HasOne("E_prescription.ActiveIngredientStrength", "Strength")
                        .WithMany("ActiveIngredient")
                        .HasForeignKey("StrengthId")
                        .HasConstraintName("FK_ActiveIngredient_ActiveIngredientStrength");

                    b.Navigation("Strength");
                });

            modelBuilder.Entity("E_prescription.ChronicHistory", b =>
                {
                    b.HasOne("E_prescription.ConditionDiagnosis", "Condition")
                        .WithMany("ChronicHistory")
                        .HasForeignKey("ConditionId")
                        .HasConstraintName("FK_ChronicHistory_ConditionDiagnosis");

                    b.HasOne("E_prescription.Doctor", "Doctor")
                        .WithMany("ChronicHistory")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_ChronicHistory_Doctor");

                    b.HasOne("E_prescription.Patient", "Patient")
                        .WithMany("ChronicHistory")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_ChronicHistory_Patient");

                    b.Navigation("Condition");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("E_prescription.ChronicMedication", b =>
                {
                    b.HasOne("E_prescription.Doctor", "Doctor")
                        .WithMany("ChronicMedication")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_ChronicMedication_Doctor");

                    b.HasOne("E_prescription.MedicationRecord", "Medication")
                        .WithMany("ChronicMedication")
                        .HasForeignKey("MedicationId")
                        .HasConstraintName("FK_ChronicMedication_MedicationRecord");

                    b.HasOne("E_prescription.Patient", "Patient")
                        .WithMany("ChronicMedication")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_ChronicMedication_Patient");

                    b.Navigation("Doctor");

                    b.Navigation("Medication");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("E_prescription.ContraIndication", b =>
                {
                    b.HasOne("E_prescription.ConditionDiagnosis", "Condition")
                        .WithMany("ContraIndication")
                        .HasForeignKey("ConditionId")
                        .HasConstraintName("FK_ContraIndication_ConditionDiagnosis");

                    b.HasOne("E_prescription.ActiveIngredient", "Ingredient")
                        .WithMany("ContraIndication")
                        .HasForeignKey("IngredientId")
                        .HasConstraintName("FK_ContraIndication_ActiveIngredient");

                    b.Navigation("Condition");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("E_prescription.DispensedMedication", b =>
                {
                    b.HasOne("E_prescription.ContraIndication", "ContraIndication")
                        .WithMany("DispensedMedication")
                        .HasForeignKey("ContraIndicationId")
                        .HasConstraintName("FK_DispensedMedication_ContraIndication");

                    b.HasOne("E_prescription.DosageForm", "Dosage")
                        .WithMany("DispensedMedication")
                        .HasForeignKey("DosageId")
                        .HasConstraintName("FK_DispensedMedication_DosageForm");

                    b.HasOne("E_prescription.MedicationInteraction", "MedInteraction")
                        .WithMany("DispensedMedication")
                        .HasForeignKey("MedInteractionId")
                        .HasConstraintName("FK_DispensedMedication_MedicationInteraction");

                    b.HasOne("E_prescription.MedicationRecord", "Medication")
                        .WithMany("DispensedMedication")
                        .HasForeignKey("MedicationId")
                        .HasConstraintName("FK_DispensedMedication_MedicationRecord")
                        .IsRequired();

                    b.HasOne("E_prescription.Patient", "Patient")
                        .WithMany("DispensedMedication")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_DispensedMedication_Patient");

                    b.HasOne("E_prescription.Pharmacist", "Pharmacist")
                        .WithMany("DispensedMedication")
                        .HasForeignKey("PharmacistId")
                        .HasConstraintName("FK_DispensedMedication_Pharmacist");

                    b.Navigation("ContraIndication");

                    b.Navigation("Dosage");

                    b.Navigation("Medication");

                    b.Navigation("MedInteraction");

                    b.Navigation("Patient");

                    b.Navigation("Pharmacist");
                });

            modelBuilder.Entity("E_prescription.Doctor", b =>
                {
                    b.HasOne("E_prescription.MedicalPractice", "MedicalPractice")
                        .WithMany("Doctor")
                        .HasForeignKey("MedicalPracticeId")
                        .HasConstraintName("FK_Doctor_MedicalPractice");

                    b.HasOne("E_prescription.HighestQualification", "Qualification")
                        .WithMany("Doctor")
                        .HasForeignKey("QualificationId")
                        .HasConstraintName("FK_Doctor_HighestQualification");

                    b.Navigation("MedicalPractice");

                    b.Navigation("Qualification");
                });

            modelBuilder.Entity("E_prescription.MedInteractionActiveIngredient", b =>
                {
                    b.HasOne("E_prescription.ActiveIngredient", "Ingredient")
                        .WithMany("MedInteractionActiveIngredient")
                        .HasForeignKey("IngredientId")
                        .HasConstraintName("FK_MedInteraction_ActiveIngredient_ActiveIngredient1");

                    b.HasOne("E_prescription.InteractionLevel", "InteractionLevel")
                        .WithMany("MedInteractionActiveIngredient")
                        .HasForeignKey("InteractionLevelId")
                        .HasConstraintName("FK_MedInteraction_ActiveIngredient_InteractionLevel1");

                    b.HasOne("E_prescription.MedicationInteraction", "MedInteraction")
                        .WithMany("MedInteractionActiveIngredient")
                        .HasForeignKey("MedInteractionId")
                        .HasConstraintName("FK_MedInteraction_ActiveIngredient_MedicationInteraction");

                    b.Navigation("Ingredient");

                    b.Navigation("InteractionLevel");

                    b.Navigation("MedInteraction");
                });

            modelBuilder.Entity("E_prescription.MedicalPractice", b =>
                {
                    b.HasOne("E_prescription.City", "City")
                        .WithMany("MedicalPractice")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_MedicalPractice_City");

                    b.Navigation("City");
                });

            modelBuilder.Entity("E_prescription.MedicationInteraction", b =>
                {
                    b.HasOne("E_prescription.ActiveIngredient", "Ingredient")
                        .WithMany("MedicationInteraction")
                        .HasForeignKey("IngredientId")
                        .HasConstraintName("FK_MedicationInteraction_ActiveIngredient");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("E_prescription.MedicationRecord", b =>
                {
                    b.HasOne("E_prescription.ActiveIngredient", "Ingredient")
                        .WithMany("MedicationRecord")
                        .HasForeignKey("IngredientId")
                        .HasConstraintName("FK_MedicationRecord_ActiveIngredient");

                    b.HasOne("E_prescription.Schedule", "Schedule")
                        .WithMany("MedicationRecord")
                        .HasForeignKey("ScheduleId")
                        .HasConstraintName("FK_MedicationRecord_Schedule");

                    b.Navigation("Ingredient");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("E_prescription.PatientAllergy", b =>
                {
                    b.HasOne("E_prescription.Doctor", "Doctor")
                        .WithMany("PatientAllergy")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_PatientAllergy_Doctor");

                    b.HasOne("E_prescription.ActiveIngredient", "Ingredient")
                        .WithMany("PatientAllergy")
                        .HasForeignKey("IngredientId")
                        .HasConstraintName("FK_PatientAllergy_ActiveIngredient");

                    b.HasOne("E_prescription.Patient", "Patient")
                        .WithMany("PatientAllergy")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_PatientAllergy_Patient");

                    b.Navigation("Doctor");

                    b.Navigation("Ingredient");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("E_prescription.PatientDoctorVisit", b =>
                {
                    b.HasOne("E_prescription.Doctor", "Doctor")
                        .WithMany("PatientDoctorVisit")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_PatientDoctorVisit_Doctor");

                    b.HasOne("E_prescription.Patient", "Patient")
                        .WithMany("PatientDoctorVisit")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_PatientDoctorVisit_Patient");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("E_prescription.Pharmacist", b =>
                {
                    b.HasOne("E_prescription.Pharmacy", "Pharmacy")
                        .WithMany("Pharmacist")
                        .HasForeignKey("PharmacyId")
                        .HasConstraintName("FK_Pharmacist_Pharmacy");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("E_prescription.Pharmacy", b =>
                {
                    b.HasOne("E_prescription.City", "City")
                        .WithMany("Pharmacy")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Pharmacy_City");

                    b.Navigation("City");
                });

            modelBuilder.Entity("E_prescription.Prescription", b =>
                {
                    b.HasOne("E_prescription.ConditionDiagnosis", "Condition")
                        .WithMany("Prescription")
                        .HasForeignKey("ConditionId")
                        .HasConstraintName("FK_Prescription_ConditionDiagnosis");

                    b.HasOne("E_prescription.DosageForm", "Dosage")
                        .WithMany("Prescription")
                        .HasForeignKey("DosageId")
                        .HasConstraintName("FK_Prescription_DosageForm");

                    b.HasOne("E_prescription.MedicationRecord", "Medication")
                        .WithMany("Prescription")
                        .HasForeignKey("MedicationId")
                        .HasConstraintName("FK_Prescription_MedicationRecord");

                    b.Navigation("Condition");

                    b.Navigation("Dosage");

                    b.Navigation("Medication");
                });

            modelBuilder.Entity("E_prescription.PrescriptionMedication", b =>
                {
                    b.HasOne("E_prescription.ContraIndication", "ContraIndication")
                        .WithMany("PrescriptionMedication")
                        .HasForeignKey("ContraIndicationId")
                        .HasConstraintName("FK_Prescription_Medication_ContraIndication");

                    b.HasOne("E_prescription.DosageForm", "Dosage")
                        .WithMany("PrescriptionMedication")
                        .HasForeignKey("DosageId")
                        .HasConstraintName("FK_Prescription_Medication_DosageForm");

                    b.HasOne("E_prescription.MedicationInteraction", "MedInteraction")
                        .WithMany("PrescriptionMedication")
                        .HasForeignKey("MedInteractionId")
                        .HasConstraintName("FK_Prescription_Medication_MedicationInteraction");

                    b.HasOne("E_prescription.MedicationRecord", "Medication")
                        .WithMany("PrescriptionMedication")
                        .HasForeignKey("MedicationId")
                        .HasConstraintName("FK_Prescription_Medication_MedicationRecord");

                    b.HasOne("E_prescription.PatientDoctorVisit", "PatientDoctorVisit")
                        .WithMany("PrescriptionMedication")
                        .HasForeignKey("PatientDoctorVisitId")
                        .HasConstraintName("FK_Prescription_Medication_PatientDoctorVisit");

                    b.HasOne("E_prescription.Repeat", "Repeat")
                        .WithMany("PrescriptionMedication")
                        .HasForeignKey("RepeatId")
                        .HasConstraintName("FK_Prescription_Medication_Repeat");

                    b.Navigation("ContraIndication");

                    b.Navigation("Dosage");

                    b.Navigation("Medication");

                    b.Navigation("MedInteraction");

                    b.Navigation("PatientDoctorVisit");

                    b.Navigation("Repeat");
                });

            modelBuilder.Entity("E_prescription.Suburb", b =>
                {
                    b.HasOne("E_prescription.City", "City")
                        .WithMany("Suburb")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Suburb_City");

                    b.Navigation("City");
                });

            modelBuilder.Entity("E_prescription.User", b =>
                {
                    b.HasOne("E_prescription.City", "City")
                        .WithMany("User")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_User_City");

                    b.HasOne("E_prescription.Admin", "UserNavigation")
                        .WithOne("User")
                        .HasForeignKey("E_prescription.User", "UserId")
                        .HasConstraintName("FK_User_Admin")
                        .IsRequired();

                    b.HasOne("E_prescription.Doctor", "User1")
                        .WithOne("User")
                        .HasForeignKey("E_prescription.User", "UserId")
                        .HasConstraintName("FK_User_Doctor")
                        .IsRequired();

                    b.HasOne("E_prescription.Pharmacist", "User2")
                        .WithOne("User")
                        .HasForeignKey("E_prescription.User", "UserId")
                        .HasConstraintName("FK_User_Pharmacist")
                        .IsRequired();

                    b.HasOne("E_prescription.Pharmacy", "User3")
                        .WithOne("User")
                        .HasForeignKey("E_prescription.User", "UserId")
                        .HasConstraintName("FK_User_Pharmacy")
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("User1");

                    b.Navigation("User2");

                    b.Navigation("User3");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("E_prescription.ActiveIngredient", b =>
                {
                    b.Navigation("ContraIndication");

                    b.Navigation("MedicationInteraction");

                    b.Navigation("MedicationRecord");

                    b.Navigation("MedInteractionActiveIngredient");

                    b.Navigation("PatientAllergy");
                });

            modelBuilder.Entity("E_prescription.ActiveIngredientStrength", b =>
                {
                    b.Navigation("ActiveIngredient");
                });

            modelBuilder.Entity("E_prescription.Admin", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("E_prescription.City", b =>
                {
                    b.Navigation("MedicalPractice");

                    b.Navigation("Pharmacy");

                    b.Navigation("Suburb");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_prescription.ConditionDiagnosis", b =>
                {
                    b.Navigation("ChronicHistory");

                    b.Navigation("ContraIndication");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("E_prescription.ContraIndication", b =>
                {
                    b.Navigation("DispensedMedication");

                    b.Navigation("PrescriptionMedication");
                });

            modelBuilder.Entity("E_prescription.Doctor", b =>
                {
                    b.Navigation("ChronicHistory");

                    b.Navigation("ChronicMedication");

                    b.Navigation("PatientAllergy");

                    b.Navigation("PatientDoctorVisit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_prescription.DosageForm", b =>
                {
                    b.Navigation("DispensedMedication");

                    b.Navigation("Prescription");

                    b.Navigation("PrescriptionMedication");
                });

            modelBuilder.Entity("E_prescription.HighestQualification", b =>
                {
                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("E_prescription.InteractionLevel", b =>
                {
                    b.Navigation("MedInteractionActiveIngredient");
                });

            modelBuilder.Entity("E_prescription.MedicalPractice", b =>
                {
                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("E_prescription.MedicationInteraction", b =>
                {
                    b.Navigation("DispensedMedication");

                    b.Navigation("MedInteractionActiveIngredient");

                    b.Navigation("PrescriptionMedication");
                });

            modelBuilder.Entity("E_prescription.MedicationRecord", b =>
                {
                    b.Navigation("ChronicMedication");

                    b.Navigation("DispensedMedication");

                    b.Navigation("Prescription");

                    b.Navigation("PrescriptionMedication");
                });

            modelBuilder.Entity("E_prescription.Patient", b =>
                {
                    b.Navigation("ChronicHistory");

                    b.Navigation("ChronicMedication");

                    b.Navigation("DispensedMedication");

                    b.Navigation("PatientAllergy");

                    b.Navigation("PatientDoctorVisit");
                });

            modelBuilder.Entity("E_prescription.PatientDoctorVisit", b =>
                {
                    b.Navigation("PrescriptionMedication");
                });

            modelBuilder.Entity("E_prescription.Pharmacist", b =>
                {
                    b.Navigation("DispensedMedication");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_prescription.Pharmacy", b =>
                {
                    b.Navigation("Pharmacist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_prescription.Repeat", b =>
                {
                    b.Navigation("PrescriptionMedication");
                });

            modelBuilder.Entity("E_prescription.Schedule", b =>
                {
                    b.Navigation("MedicationRecord");
                });
#pragma warning restore 612, 618
        }
    }
}
